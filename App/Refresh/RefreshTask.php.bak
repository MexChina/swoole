<?php
/**
 * Created by PhpStorm.
 * User: qing
 * Date: 16-10-27
 * Time: 上午11:31
 */
namespace Swoole\App\Refresh;
use Swoole\Core\Log;
use Swoole\Core\Lib\Worker;
class RefreshTask extends \Swoole\Core\App\Controller{
    public function init(){}
    public function index($params){
        $page = $params['page'];
        $page_count = $params['page_count'];
        $page_size = $params['page_size'];
        $fields = $params['field'];
        $db_name = $params['db'];
        $id = $params['id'];
        $db=$this->db($db_name);
        /**
         * 如果是批量刷会去取id
         */
        if (empty($id)){
            $result = $db->query("SELECT id FROM `resumes` WHERE id >= (SELECT id FROM `resumes` where is_deleted='N' ORDER BY id asc LIMIT " . ($page - 1) * $page_size . ", 1) and is_deleted='N' ORDER BY id asc LIMIT $page_size")->fetchall();
            $ids = '';
            foreach ($result as $r) {
                $ids .= $r['id'] . ',';
            }
            $ids = rtrim($ids, ',');
            if (empty($ids)) {
                Log::write_log("$db_name 第 $page 页，共 $page_count 页 更新 0 条数据 ...");
                return false;
            }
        }else{
            $ids = $id;
        }

        $result = $db->query("select * from resumes_extras where id in($ids)")->fetchall();
        $db->autocommit(false);
        $j=0;
        foreach($result as $r){
            $r['compress'] = json_decode(gzuncompress($r['compress']), true);
            $value = '';
            foreach($fields as $field=>$work_name){
                $work = new Worker($work_name);
                $value .= $this->$field($r['compress'][$field],$work).',';
            }
            $value = rtrim($value,',');
            if(empty($value)) continue;
            $db->query("update resumes_algorithms set $value where id='{$r['id']}' limit 1");
            $j++;
        }
        $db->commit();
        $db->close();

        Log::write_log("$db_name 第 $page 页，共 $page_count 页 更新 $j 条数据 ...");
        return array('current_page'=>$page);
    }

    /** 刷 cv_education、cv_degree
     * @param $educations array 教育信息
     * @param $work object gearmanclient
     * @return string sql 组装的update sql语句
     */
    private function education($educations,$work){
        if(empty($educations)) return '';
        $p=array();
        foreach($educations as $education){
            $education_id = $education['id'];
            $school_name = isset($education['school_name']) ? $education['school_name'] : '';
            $discipline_name = isset($education['discipline_name']) ? $education['discipline_name'] : '';
            $degree = isset($education['degree']) ? $education['degree'] : 99;

            if(!empty($school_name) || !empty($discipline_name)){
                $p[$education_id] = json_encode(array('school'=>$school_name, 'major'=>$discipline_name, 'degree'=>$degree));
            }
        }
        if(empty($p)) return '';
        $gearman_return = $work->client(array(
            'c'=>'CVEducation',
            'm'=>'query',
            'p'=>$p
        ),true);

        if(empty($gearman_return) || !is_array($gearman_return)){
            return '';
        }

        $results = $gearman_return['results'];

        if (isset($results['features'])) {
            foreach ($results['units'] as $education_id => $row) {
                $cv_education[$education_id] = array('school_id' => $row['school_id'], 'discipline_id' => $row['major_id']);
            }
            $cv_degree = (int) $results['features']['degree'];
        } else {
            foreach ($results as $education_id => $row) {
                $cv_education[$education_id] = array('school_id' => $row['school_id'], 'discipline_id' => $row['major_id']);
            }
        }

        $set = "`cv_education`='".json_encode($cv_education)."',`cv_degree`='{$cv_degree}'";
        return $set;
    }

    /** 刷 cv_trade
     * @param $works array 工作扩展信息
     * @param $work object gearmanclient
     * @return string sql
     */
    private function work($works,$client){
        if(empty($works)){
            Log::write_log("works empty ...");
            return '';
        }
        $p=array();
        foreach($works as $id => $work) {
            $p = array(
                'position' => empty($work['position_name']) ? '' : $work['position_name'],
                'company_name' => empty($work['corporation_name']) ? '' : $work['corporation_name'],
                'work_id' => intval($work['id']),
                'desc' => empty($work['corporation_desc']) ? (empty($work['responsibilities']) ? '' : $work['responsibilities']) : $work['corporation_desc'],
                'industry_name' => empty($work['industry_name']) ? '' : $work['industry_name'],
            );
        }
        if(empty($p)) return '';
        $gearman_return = $client->client(array(
            'cv_id'=>'',
            'work_list'=>array($p)
        ),true);

        if(empty($gearman_return) || !is_array($gearman_return)){
            return '';
        }
        $results = $gearman_return['result'];
        return $results ? "`cv_trade`='".json_encode($results)."'" : '';
    }

}